// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ModelActions model actions
//
// swagger:model modelActions
type ModelActions string

func NewModelActions(value ModelActions) *ModelActions {
	v := value
	return &v
}

const (

	// ModelActionsUnkonwn captures enum value "unkonwn"
	ModelActionsUnkonwn ModelActions = "unkonwn"

	// ModelActionsGetInfo captures enum value "get_info"
	ModelActionsGetInfo ModelActions = "get_info"

	// ModelActionsManageMembers captures enum value "manage_members"
	ModelActionsManageMembers ModelActions = "manage_members"

	// ModelActionsManageService captures enum value "manage_service"
	ModelActionsManageService ModelActions = "manage_service"
)

// for schema
var modelActionsEnum []interface{}

func init() {
	var res []ModelActions
	if err := json.Unmarshal([]byte(`["unkonwn","get_info","manage_members","manage_service"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		modelActionsEnum = append(modelActionsEnum, v)
	}
}

func (m ModelActions) validateModelActionsEnum(path, location string, value ModelActions) error {
	if err := validate.EnumCase(path, location, value, modelActionsEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this model actions
func (m ModelActions) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateModelActionsEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this model actions based on context it is used
func (m ModelActions) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
