// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ModelService model service
//
// swagger:model modelService
type ModelService struct {

	// describe
	Describe string `json:"describe,omitempty"`

	// envs
	Envs []*ModelEnvironmentVariable `json:"envs"`

	// expose ports
	ExposePorts []*ModelPort `json:"expose_ports"`

	// image
	Image *ModelImage `json:"image,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// replica
	Replica int32 `json:"replica,omitempty"`
}

// Validate validates this model service
func (m *ModelService) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEnvs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExposePorts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelService) validateEnvs(formats strfmt.Registry) error {
	if swag.IsZero(m.Envs) { // not required
		return nil
	}

	for i := 0; i < len(m.Envs); i++ {
		if swag.IsZero(m.Envs[i]) { // not required
			continue
		}

		if m.Envs[i] != nil {
			if err := m.Envs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("envs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("envs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ModelService) validateExposePorts(formats strfmt.Registry) error {
	if swag.IsZero(m.ExposePorts) { // not required
		return nil
	}

	for i := 0; i < len(m.ExposePorts); i++ {
		if swag.IsZero(m.ExposePorts[i]) { // not required
			continue
		}

		if m.ExposePorts[i] != nil {
			if err := m.ExposePorts[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("expose_ports" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("expose_ports" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ModelService) validateImage(formats strfmt.Registry) error {
	if swag.IsZero(m.Image) { // not required
		return nil
	}

	if m.Image != nil {
		if err := m.Image.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("image")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("image")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this model service based on the context it is used
func (m *ModelService) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEnvs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExposePorts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateImage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelService) contextValidateEnvs(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Envs); i++ {

		if m.Envs[i] != nil {
			if err := m.Envs[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("envs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("envs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ModelService) contextValidateExposePorts(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ExposePorts); i++ {

		if m.ExposePorts[i] != nil {
			if err := m.ExposePorts[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("expose_ports" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("expose_ports" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ModelService) contextValidateImage(ctx context.Context, formats strfmt.Registry) error {

	if m.Image != nil {
		if err := m.Image.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("image")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("image")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ModelService) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ModelService) UnmarshalBinary(b []byte) error {
	var res ModelService
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
