// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "apiserver",
    "title": "ez-deploy apiserver.",
    "version": "1.0.0"
  },
  "paths": {
    "/authority": {
      "post": {
        "tags": [
          "AuthorityOps"
        ],
        "operationId": "AuthorityOps_SetAuthorities",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/authorityAuthorities"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/modelCommonResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "AuthorityOps"
        ],
        "operationId": "AuthorityOps_DeleteAuthorities",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/authorityAuthorities"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/authorityDeleteAuthoritiesResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        }
      }
    },
    "/authority/identity": {
      "get": {
        "tags": [
          "AuthorityOps"
        ],
        "operationId": "AuthorityOps_ListAuthoritiesByIdentity",
        "parameters": [
          {
            "type": "string",
            "name": "email",
            "in": "query"
          },
          {
            "type": "string",
            "name": "name",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/authorityListAuthoritiesResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        }
      }
    },
    "/authority/resource": {
      "get": {
        "tags": [
          "AuthorityOps"
        ],
        "operationId": "AuthorityOps_ListAuthoritiesByResource",
        "parameters": [
          {
            "type": "string",
            "name": "type",
            "in": "query"
          },
          {
            "type": "string",
            "name": "name",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/authorityListAuthoritiesResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        }
      }
    },
    "/project": {
      "post": {
        "tags": [
          "ProjectOps"
        ],
        "operationId": "ProjectOps_CreateProject",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/projectCreateProjectReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/modelCommonResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ProjectOps"
        ],
        "operationId": "ProjectOps_DeleteProject",
        "parameters": [
          {
            "type": "string",
            "name": "project_name",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/modelCommonResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        }
      }
    },
    "/project/service": {
      "post": {
        "tags": [
          "ProjectOps"
        ],
        "operationId": "ProjectOps_SetService",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/projectSetServiceReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/modelCommonResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ProjectOps"
        ],
        "operationId": "ProjectOps_DeleteService",
        "parameters": [
          {
            "type": "string",
            "name": "project_name",
            "in": "query"
          },
          {
            "type": "string",
            "name": "service_name",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/modelCommonResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        }
      }
    },
    "/project/service/get": {
      "get": {
        "tags": [
          "ProjectOps"
        ],
        "operationId": "ProjectOps_GetService",
        "parameters": [
          {
            "type": "string",
            "name": "project_name",
            "in": "query"
          },
          {
            "type": "string",
            "name": "service_name",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/projectGetServiceResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        }
      }
    },
    "/project/service/list": {
      "get": {
        "tags": [
          "ProjectOps"
        ],
        "operationId": "ProjectOps_ListService",
        "parameters": [
          {
            "type": "string",
            "name": "project_name",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/projectListServiceResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        }
      }
    },
    "/project/service/pod": {
      "get": {
        "tags": [
          "ProjectOps"
        ],
        "operationId": "ProjectOps_ListPods",
        "parameters": [
          {
            "type": "string",
            "name": "project_name",
            "in": "query"
          },
          {
            "type": "string",
            "name": "service_name",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/projectListPodsResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        }
      }
    },
    "/user/login": {
      "post": {
        "security": [],
        "tags": [
          "IdentityOps"
        ],
        "summary": "Login by email and password.",
        "operationId": "IdentityOps_Login",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/identityLoginReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/identityLoginResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        }
      }
    },
    "/user/register": {
      "post": {
        "security": [],
        "tags": [
          "IdentityOps"
        ],
        "summary": "Register by email and password.",
        "operationId": "IdentityOps_Register",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/identityRegisterReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/modelCommonResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        }
      }
    },
    "/user/token/private": {
      "get": {
        "tags": [
          "IdentityOps"
        ],
        "summary": "get private_token.",
        "operationId": "IdentityOps_GetPrivateToken",
        "parameters": [
          {
            "type": "string",
            "name": "email",
            "in": "query"
          },
          {
            "type": "string",
            "name": "name",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/modelToken"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        }
      },
      "post": {
        "tags": [
          "IdentityOps"
        ],
        "summary": "generate private_token.",
        "operationId": "IdentityOps_ReGeneratePrivateToken",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/modelCommonResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        }
      }
    },
    "/user/token/public": {
      "get": {
        "tags": [
          "IdentityOps"
        ],
        "summary": "list user's public_tokens.",
        "operationId": "IdentityOps_ListPublicToken",
        "parameters": [
          {
            "type": "string",
            "name": "email",
            "in": "query"
          },
          {
            "type": "string",
            "name": "name",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/identityListPublicTokenResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        }
      },
      "post": {
        "tags": [
          "IdentityOps"
        ],
        "summary": "generate public_token.",
        "operationId": "IdentityOps_GeneratePublicToken",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/identityGeneratePublicTokenReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/modelCommonResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "IdentityOps"
        ],
        "summary": "delete public_token.",
        "operationId": "IdentityOps_DeletePublicToken",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/identityDeletePublicTokenReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/modelCommonResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        }
      }
    },
    "/user/verify": {
      "get": {
        "tags": [
          "IdentityOps"
        ],
        "summary": "Verify by session_token.",
        "operationId": "IdentityOps_Verify",
        "parameters": [
          {
            "type": "string",
            "name": "token",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/identityVerifyResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "DeleteAuthoritiesRespFailMessages": {
      "type": "object",
      "properties": {
        "authority": {
          "x-order": 0,
          "$ref": "#/definitions/modelAuthority"
        },
        "error": {
          "x-order": 1,
          "$ref": "#/definitions/modelError"
        }
      }
    },
    "authorityAuthorities": {
      "type": "object",
      "properties": {
        "authorities": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/modelAuthority"
          },
          "x-order": 0
        }
      }
    },
    "authorityDeleteAuthoritiesResp": {
      "type": "object",
      "properties": {
        "fail_messages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeleteAuthoritiesRespFailMessages"
          },
          "x-order": 0
        }
      }
    },
    "authorityListAuthoritiesResp": {
      "type": "object",
      "properties": {
        "authorities": {
          "x-order": 0,
          "$ref": "#/definitions/authorityAuthorities"
        },
        "error": {
          "x-order": 1,
          "$ref": "#/definitions/modelError"
        }
      }
    },
    "gatewayruntimeError": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32",
          "x-order": 0
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          },
          "x-order": 1
        },
        "error": {
          "type": "string",
          "x-order": 2
        },
        "message": {
          "type": "string",
          "x-order": 3
        }
      }
    },
    "identityDeletePublicTokenReq": {
      "type": "object",
      "properties": {
        "identity": {
          "x-order": 0,
          "$ref": "#/definitions/modelIdentity"
        },
        "token_id": {
          "type": "string",
          "format": "int64",
          "x-order": 1
        }
      }
    },
    "identityGeneratePublicTokenReq": {
      "type": "object",
      "properties": {
        "api_token": {
          "x-order": 0,
          "$ref": "#/definitions/modelAPIToken"
        },
        "identity": {
          "x-order": 1,
          "$ref": "#/definitions/modelIdentity"
        }
      }
    },
    "identityListPublicTokenResp": {
      "type": "object",
      "properties": {
        "error": {
          "x-order": 0,
          "$ref": "#/definitions/modelError"
        },
        "public_tokens": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/modelAPIToken"
          },
          "x-order": 1
        }
      }
    },
    "identityLoginReq": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "x-order": 0
        },
        "password": {
          "type": "string",
          "x-order": 1
        }
      }
    },
    "identityLoginResp": {
      "type": "object",
      "properties": {
        "error": {
          "x-order": 0,
          "$ref": "#/definitions/modelError"
        },
        "identity": {
          "x-order": 1,
          "$ref": "#/definitions/modelIdentity"
        },
        "token": {
          "x-order": 2,
          "$ref": "#/definitions/modelToken"
        }
      }
    },
    "identityRegisterReq": {
      "type": "object",
      "properties": {
        "identity": {
          "x-order": 0,
          "$ref": "#/definitions/modelIdentity"
        },
        "password": {
          "type": "string",
          "x-order": 1
        }
      }
    },
    "identityVerifyResp": {
      "type": "object",
      "properties": {
        "error": {
          "x-order": 0,
          "$ref": "#/definitions/modelError"
        },
        "identity": {
          "x-order": 1,
          "$ref": "#/definitions/modelIdentity"
        },
        "token_type": {
          "x-order": 2,
          "$ref": "#/definitions/modelTokenType"
        }
      }
    },
    "modelAPIToken": {
      "type": "object",
      "properties": {
        "allowed_actions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/modelActions"
          },
          "x-order": 0
        },
        "deadline_timestamp": {
          "type": "string",
          "format": "int64",
          "x-order": 1
        },
        "id": {
          "type": "string",
          "format": "int64",
          "x-order": 2
        },
        "message": {
          "type": "string",
          "x-order": 3
        },
        "name": {
          "type": "string",
          "x-order": 4
        },
        "token": {
          "x-order": 5,
          "$ref": "#/definitions/modelToken"
        }
      }
    },
    "modelActions": {
      "type": "string",
      "default": "unkonwn",
      "enum": [
        "unkonwn",
        "get_info",
        "manage_members",
        "manage_service"
      ]
    },
    "modelAuthority": {
      "type": "object",
      "properties": {
        "action": {
          "type": "string",
          "x-order": 0
        },
        "identity": {
          "x-order": 1,
          "$ref": "#/definitions/modelIdentity"
        },
        "resource": {
          "x-order": 2,
          "$ref": "#/definitions/modelResource"
        }
      }
    },
    "modelCommonResp": {
      "description": "no other return value.",
      "type": "object",
      "properties": {
        "error": {
          "x-order": 0,
          "$ref": "#/definitions/modelError"
        }
      }
    },
    "modelEnvironmentVariable": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "x-order": 0
        },
        "value": {
          "type": "string",
          "x-order": 1
        }
      }
    },
    "modelError": {
      "type": "object",
      "properties": {
        "error": {
          "type": "boolean",
          "x-order": 0
        },
        "message": {
          "type": "string",
          "x-order": 1
        }
      }
    },
    "modelIdentity": {
      "description": "record user's identity information.",
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "x-order": 0
        },
        "name": {
          "type": "string",
          "x-order": 1
        }
      }
    },
    "modelImage": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string",
          "x-order": 0
        },
        "version": {
          "type": "string",
          "x-order": 1
        }
      }
    },
    "modelPod": {
      "type": "object",
      "properties": {
        "age": {
          "type": "string",
          "format": "int64",
          "x-order": 0
        },
        "machine_name": {
          "type": "string",
          "x-order": 1
        },
        "name": {
          "type": "string",
          "x-order": 2
        },
        "status": {
          "type": "string",
          "x-order": 3
        }
      }
    },
    "modelPort": {
      "description": "Port for container.",
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "x-order": 0
        },
        "port": {
          "type": "integer",
          "format": "int32",
          "x-order": 1
        }
      }
    },
    "modelProject": {
      "type": "object",
      "properties": {
        "describe": {
          "type": "string",
          "x-order": 0
        },
        "name": {
          "type": "string",
          "x-order": 1
        }
      }
    },
    "modelResource": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "x-order": 0
        },
        "type": {
          "type": "string",
          "x-order": 1
        }
      }
    },
    "modelService": {
      "type": "object",
      "properties": {
        "describe": {
          "type": "string",
          "x-order": 0
        },
        "envs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/modelEnvironmentVariable"
          },
          "x-order": 1
        },
        "expose_ports": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/modelPort"
          },
          "x-order": 2
        },
        "image": {
          "x-order": 3,
          "$ref": "#/definitions/modelImage"
        },
        "name": {
          "type": "string",
          "x-order": 4
        },
        "replica": {
          "type": "integer",
          "format": "int32",
          "x-order": 5
        }
      }
    },
    "modelToken": {
      "description": "used to access browser/api.",
      "type": "object",
      "properties": {
        "token": {
          "type": "string",
          "x-order": 0
        },
        "type": {
          "x-order": 1,
          "$ref": "#/definitions/modelTokenType"
        }
      }
    },
    "modelTokenType": {
      "type": "string",
      "default": "session",
      "enum": [
        "session",
        "private",
        "public"
      ]
    },
    "projectCreateProjectReq": {
      "type": "object",
      "properties": {
        "project": {
          "x-order": 0,
          "$ref": "#/definitions/modelProject"
        }
      }
    },
    "projectGetServiceResp": {
      "type": "object",
      "properties": {
        "error": {
          "x-order": 0,
          "$ref": "#/definitions/modelError"
        },
        "service": {
          "x-order": 1,
          "$ref": "#/definitions/modelService"
        }
      }
    },
    "projectListPodsResp": {
      "type": "object",
      "properties": {
        "error": {
          "x-order": 0,
          "$ref": "#/definitions/modelError"
        },
        "pods": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/modelPod"
          },
          "x-order": 1
        }
      }
    },
    "projectListServiceResp": {
      "type": "object",
      "properties": {
        "error": {
          "x-order": 0,
          "$ref": "#/definitions/modelError"
        },
        "service": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/modelService"
          },
          "x-order": 1
        }
      }
    },
    "projectSetServiceReq": {
      "description": "create if not exist, else update service.",
      "type": "object",
      "properties": {
        "project_name": {
          "type": "string",
          "x-order": 0
        },
        "service": {
          "x-order": 1,
          "$ref": "#/definitions/modelService"
        }
      }
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "type_url": {
          "type": "string",
          "x-order": 0
        },
        "value": {
          "type": "string",
          "format": "byte",
          "x-order": 1
        }
      }
    }
  },
  "securityDefinitions": {
    "key": {
      "type": "apiKey",
      "name": "X-EZDEOPLY-APIKEY",
      "in": "header"
    }
  },
  "security": [
    {
      "key": []
    }
  ]
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "apiserver",
    "title": "ez-deploy apiserver.",
    "version": "1.0.0"
  },
  "paths": {
    "/authority": {
      "post": {
        "tags": [
          "AuthorityOps"
        ],
        "operationId": "AuthorityOps_SetAuthorities",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/authorityAuthorities"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/modelCommonResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "AuthorityOps"
        ],
        "operationId": "AuthorityOps_DeleteAuthorities",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/authorityAuthorities"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/authorityDeleteAuthoritiesResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        }
      }
    },
    "/authority/identity": {
      "get": {
        "tags": [
          "AuthorityOps"
        ],
        "operationId": "AuthorityOps_ListAuthoritiesByIdentity",
        "parameters": [
          {
            "type": "string",
            "name": "email",
            "in": "query"
          },
          {
            "type": "string",
            "name": "name",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/authorityListAuthoritiesResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        }
      }
    },
    "/authority/resource": {
      "get": {
        "tags": [
          "AuthorityOps"
        ],
        "operationId": "AuthorityOps_ListAuthoritiesByResource",
        "parameters": [
          {
            "type": "string",
            "name": "type",
            "in": "query"
          },
          {
            "type": "string",
            "name": "name",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/authorityListAuthoritiesResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        }
      }
    },
    "/project": {
      "post": {
        "tags": [
          "ProjectOps"
        ],
        "operationId": "ProjectOps_CreateProject",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/projectCreateProjectReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/modelCommonResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ProjectOps"
        ],
        "operationId": "ProjectOps_DeleteProject",
        "parameters": [
          {
            "type": "string",
            "name": "project_name",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/modelCommonResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        }
      }
    },
    "/project/service": {
      "post": {
        "tags": [
          "ProjectOps"
        ],
        "operationId": "ProjectOps_SetService",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/projectSetServiceReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/modelCommonResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ProjectOps"
        ],
        "operationId": "ProjectOps_DeleteService",
        "parameters": [
          {
            "type": "string",
            "name": "project_name",
            "in": "query"
          },
          {
            "type": "string",
            "name": "service_name",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/modelCommonResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        }
      }
    },
    "/project/service/get": {
      "get": {
        "tags": [
          "ProjectOps"
        ],
        "operationId": "ProjectOps_GetService",
        "parameters": [
          {
            "type": "string",
            "name": "project_name",
            "in": "query"
          },
          {
            "type": "string",
            "name": "service_name",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/projectGetServiceResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        }
      }
    },
    "/project/service/list": {
      "get": {
        "tags": [
          "ProjectOps"
        ],
        "operationId": "ProjectOps_ListService",
        "parameters": [
          {
            "type": "string",
            "name": "project_name",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/projectListServiceResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        }
      }
    },
    "/project/service/pod": {
      "get": {
        "tags": [
          "ProjectOps"
        ],
        "operationId": "ProjectOps_ListPods",
        "parameters": [
          {
            "type": "string",
            "name": "project_name",
            "in": "query"
          },
          {
            "type": "string",
            "name": "service_name",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/projectListPodsResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        }
      }
    },
    "/user/login": {
      "post": {
        "security": [],
        "tags": [
          "IdentityOps"
        ],
        "summary": "Login by email and password.",
        "operationId": "IdentityOps_Login",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/identityLoginReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/identityLoginResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        }
      }
    },
    "/user/register": {
      "post": {
        "security": [],
        "tags": [
          "IdentityOps"
        ],
        "summary": "Register by email and password.",
        "operationId": "IdentityOps_Register",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/identityRegisterReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/modelCommonResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        }
      }
    },
    "/user/token/private": {
      "get": {
        "tags": [
          "IdentityOps"
        ],
        "summary": "get private_token.",
        "operationId": "IdentityOps_GetPrivateToken",
        "parameters": [
          {
            "type": "string",
            "name": "email",
            "in": "query"
          },
          {
            "type": "string",
            "name": "name",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/modelToken"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        }
      },
      "post": {
        "tags": [
          "IdentityOps"
        ],
        "summary": "generate private_token.",
        "operationId": "IdentityOps_ReGeneratePrivateToken",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/modelCommonResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        }
      }
    },
    "/user/token/public": {
      "get": {
        "tags": [
          "IdentityOps"
        ],
        "summary": "list user's public_tokens.",
        "operationId": "IdentityOps_ListPublicToken",
        "parameters": [
          {
            "type": "string",
            "name": "email",
            "in": "query"
          },
          {
            "type": "string",
            "name": "name",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/identityListPublicTokenResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        }
      },
      "post": {
        "tags": [
          "IdentityOps"
        ],
        "summary": "generate public_token.",
        "operationId": "IdentityOps_GeneratePublicToken",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/identityGeneratePublicTokenReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/modelCommonResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "IdentityOps"
        ],
        "summary": "delete public_token.",
        "operationId": "IdentityOps_DeletePublicToken",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/identityDeletePublicTokenReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/modelCommonResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        }
      }
    },
    "/user/verify": {
      "get": {
        "tags": [
          "IdentityOps"
        ],
        "summary": "Verify by session_token.",
        "operationId": "IdentityOps_Verify",
        "parameters": [
          {
            "type": "string",
            "name": "token",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/identityVerifyResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "DeleteAuthoritiesRespFailMessages": {
      "type": "object",
      "properties": {
        "authority": {
          "x-order": 0,
          "$ref": "#/definitions/modelAuthority"
        },
        "error": {
          "x-order": 1,
          "$ref": "#/definitions/modelError"
        }
      }
    },
    "authorityAuthorities": {
      "type": "object",
      "properties": {
        "authorities": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/modelAuthority"
          },
          "x-order": 0
        }
      }
    },
    "authorityDeleteAuthoritiesResp": {
      "type": "object",
      "properties": {
        "fail_messages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeleteAuthoritiesRespFailMessages"
          },
          "x-order": 0
        }
      }
    },
    "authorityListAuthoritiesResp": {
      "type": "object",
      "properties": {
        "authorities": {
          "x-order": 0,
          "$ref": "#/definitions/authorityAuthorities"
        },
        "error": {
          "x-order": 1,
          "$ref": "#/definitions/modelError"
        }
      }
    },
    "gatewayruntimeError": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32",
          "x-order": 0
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          },
          "x-order": 1
        },
        "error": {
          "type": "string",
          "x-order": 2
        },
        "message": {
          "type": "string",
          "x-order": 3
        }
      }
    },
    "identityDeletePublicTokenReq": {
      "type": "object",
      "properties": {
        "identity": {
          "x-order": 0,
          "$ref": "#/definitions/modelIdentity"
        },
        "token_id": {
          "type": "string",
          "format": "int64",
          "x-order": 1
        }
      }
    },
    "identityGeneratePublicTokenReq": {
      "type": "object",
      "properties": {
        "api_token": {
          "x-order": 0,
          "$ref": "#/definitions/modelAPIToken"
        },
        "identity": {
          "x-order": 1,
          "$ref": "#/definitions/modelIdentity"
        }
      }
    },
    "identityListPublicTokenResp": {
      "type": "object",
      "properties": {
        "error": {
          "x-order": 0,
          "$ref": "#/definitions/modelError"
        },
        "public_tokens": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/modelAPIToken"
          },
          "x-order": 1
        }
      }
    },
    "identityLoginReq": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "x-order": 0
        },
        "password": {
          "type": "string",
          "x-order": 1
        }
      }
    },
    "identityLoginResp": {
      "type": "object",
      "properties": {
        "error": {
          "x-order": 0,
          "$ref": "#/definitions/modelError"
        },
        "identity": {
          "x-order": 1,
          "$ref": "#/definitions/modelIdentity"
        },
        "token": {
          "x-order": 2,
          "$ref": "#/definitions/modelToken"
        }
      }
    },
    "identityRegisterReq": {
      "type": "object",
      "properties": {
        "identity": {
          "x-order": 0,
          "$ref": "#/definitions/modelIdentity"
        },
        "password": {
          "type": "string",
          "x-order": 1
        }
      }
    },
    "identityVerifyResp": {
      "type": "object",
      "properties": {
        "error": {
          "x-order": 0,
          "$ref": "#/definitions/modelError"
        },
        "identity": {
          "x-order": 1,
          "$ref": "#/definitions/modelIdentity"
        },
        "token_type": {
          "x-order": 2,
          "$ref": "#/definitions/modelTokenType"
        }
      }
    },
    "modelAPIToken": {
      "type": "object",
      "properties": {
        "allowed_actions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/modelActions"
          },
          "x-order": 0
        },
        "deadline_timestamp": {
          "type": "string",
          "format": "int64",
          "x-order": 1
        },
        "id": {
          "type": "string",
          "format": "int64",
          "x-order": 2
        },
        "message": {
          "type": "string",
          "x-order": 3
        },
        "name": {
          "type": "string",
          "x-order": 4
        },
        "token": {
          "x-order": 5,
          "$ref": "#/definitions/modelToken"
        }
      }
    },
    "modelActions": {
      "type": "string",
      "default": "unkonwn",
      "enum": [
        "unkonwn",
        "get_info",
        "manage_members",
        "manage_service"
      ]
    },
    "modelAuthority": {
      "type": "object",
      "properties": {
        "action": {
          "type": "string",
          "x-order": 0
        },
        "identity": {
          "x-order": 1,
          "$ref": "#/definitions/modelIdentity"
        },
        "resource": {
          "x-order": 2,
          "$ref": "#/definitions/modelResource"
        }
      }
    },
    "modelCommonResp": {
      "description": "no other return value.",
      "type": "object",
      "properties": {
        "error": {
          "x-order": 0,
          "$ref": "#/definitions/modelError"
        }
      }
    },
    "modelEnvironmentVariable": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "x-order": 0
        },
        "value": {
          "type": "string",
          "x-order": 1
        }
      }
    },
    "modelError": {
      "type": "object",
      "properties": {
        "error": {
          "type": "boolean",
          "x-order": 0
        },
        "message": {
          "type": "string",
          "x-order": 1
        }
      }
    },
    "modelIdentity": {
      "description": "record user's identity information.",
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "x-order": 0
        },
        "name": {
          "type": "string",
          "x-order": 1
        }
      }
    },
    "modelImage": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string",
          "x-order": 0
        },
        "version": {
          "type": "string",
          "x-order": 1
        }
      }
    },
    "modelPod": {
      "type": "object",
      "properties": {
        "age": {
          "type": "string",
          "format": "int64",
          "x-order": 0
        },
        "machine_name": {
          "type": "string",
          "x-order": 1
        },
        "name": {
          "type": "string",
          "x-order": 2
        },
        "status": {
          "type": "string",
          "x-order": 3
        }
      }
    },
    "modelPort": {
      "description": "Port for container.",
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "x-order": 0
        },
        "port": {
          "type": "integer",
          "format": "int32",
          "x-order": 1
        }
      }
    },
    "modelProject": {
      "type": "object",
      "properties": {
        "describe": {
          "type": "string",
          "x-order": 0
        },
        "name": {
          "type": "string",
          "x-order": 1
        }
      }
    },
    "modelResource": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "x-order": 0
        },
        "type": {
          "type": "string",
          "x-order": 1
        }
      }
    },
    "modelService": {
      "type": "object",
      "properties": {
        "describe": {
          "type": "string",
          "x-order": 0
        },
        "envs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/modelEnvironmentVariable"
          },
          "x-order": 1
        },
        "expose_ports": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/modelPort"
          },
          "x-order": 2
        },
        "image": {
          "x-order": 3,
          "$ref": "#/definitions/modelImage"
        },
        "name": {
          "type": "string",
          "x-order": 4
        },
        "replica": {
          "type": "integer",
          "format": "int32",
          "x-order": 5
        }
      }
    },
    "modelToken": {
      "description": "used to access browser/api.",
      "type": "object",
      "properties": {
        "token": {
          "type": "string",
          "x-order": 0
        },
        "type": {
          "x-order": 1,
          "$ref": "#/definitions/modelTokenType"
        }
      }
    },
    "modelTokenType": {
      "type": "string",
      "default": "session",
      "enum": [
        "session",
        "private",
        "public"
      ]
    },
    "projectCreateProjectReq": {
      "type": "object",
      "properties": {
        "project": {
          "x-order": 0,
          "$ref": "#/definitions/modelProject"
        }
      }
    },
    "projectGetServiceResp": {
      "type": "object",
      "properties": {
        "error": {
          "x-order": 0,
          "$ref": "#/definitions/modelError"
        },
        "service": {
          "x-order": 1,
          "$ref": "#/definitions/modelService"
        }
      }
    },
    "projectListPodsResp": {
      "type": "object",
      "properties": {
        "error": {
          "x-order": 0,
          "$ref": "#/definitions/modelError"
        },
        "pods": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/modelPod"
          },
          "x-order": 1
        }
      }
    },
    "projectListServiceResp": {
      "type": "object",
      "properties": {
        "error": {
          "x-order": 0,
          "$ref": "#/definitions/modelError"
        },
        "service": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/modelService"
          },
          "x-order": 1
        }
      }
    },
    "projectSetServiceReq": {
      "description": "create if not exist, else update service.",
      "type": "object",
      "properties": {
        "project_name": {
          "type": "string",
          "x-order": 0
        },
        "service": {
          "x-order": 1,
          "$ref": "#/definitions/modelService"
        }
      }
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "type_url": {
          "type": "string",
          "x-order": 0
        },
        "value": {
          "type": "string",
          "format": "byte",
          "x-order": 1
        }
      }
    }
  },
  "securityDefinitions": {
    "key": {
      "type": "apiKey",
      "name": "X-EZDEOPLY-APIKEY",
      "in": "header"
    }
  },
  "security": [
    {
      "key": []
    }
  ]
}`))
}
