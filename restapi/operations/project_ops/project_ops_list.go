// Code generated by go-swagger; DO NOT EDIT.

package project_ops

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/ez-deploy/apiserver/models"
)

// ProjectOpsListHandlerFunc turns a function with the right signature into a project ops list handler
type ProjectOpsListHandlerFunc func(ProjectOpsListParams, *models.IdentityVerifyResp) middleware.Responder

// Handle executing the request and returning a response
func (fn ProjectOpsListHandlerFunc) Handle(params ProjectOpsListParams, principal *models.IdentityVerifyResp) middleware.Responder {
	return fn(params, principal)
}

// ProjectOpsListHandler interface for that can handle valid project ops list params
type ProjectOpsListHandler interface {
	Handle(ProjectOpsListParams, *models.IdentityVerifyResp) middleware.Responder
}

// NewProjectOpsList creates a new http.Handler for the project ops list operation
func NewProjectOpsList(ctx *middleware.Context, handler ProjectOpsListHandler) *ProjectOpsList {
	return &ProjectOpsList{Context: ctx, Handler: handler}
}

/* ProjectOpsList swagger:route GET /project/list ProjectOps projectOpsList

list all visible projects.

*/
type ProjectOpsList struct {
	Context *middleware.Context
	Handler ProjectOpsListHandler
}

func (o *ProjectOpsList) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewProjectOpsListParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal *models.IdentityVerifyResp
	if uprinc != nil {
		principal = uprinc.(*models.IdentityVerifyResp) // this is really a models.IdentityVerifyResp, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// ProjectOpsListOKBody project ops list o k body
//
// swagger:model ProjectOpsListOKBody
type ProjectOpsListOKBody struct {

	// error
	Error *models.ModelError `json:"error,omitempty"`

	// projects
	Projects []string `json:"projects"`
}

// Validate validates this project ops list o k body
func (o *ProjectOpsListOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ProjectOpsListOKBody) validateError(formats strfmt.Registry) error {
	if swag.IsZero(o.Error) { // not required
		return nil
	}

	if o.Error != nil {
		if err := o.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("projectOpsListOK" + "." + "error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("projectOpsListOK" + "." + "error")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this project ops list o k body based on the context it is used
func (o *ProjectOpsListOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateError(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ProjectOpsListOKBody) contextValidateError(ctx context.Context, formats strfmt.Registry) error {

	if o.Error != nil {
		if err := o.Error.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("projectOpsListOK" + "." + "error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("projectOpsListOK" + "." + "error")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ProjectOpsListOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ProjectOpsListOKBody) UnmarshalBinary(b []byte) error {
	var res ProjectOpsListOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
