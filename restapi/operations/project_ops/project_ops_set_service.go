// Code generated by go-swagger; DO NOT EDIT.

package project_ops

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"

	"github.com/ez-deploy/apiserver/models"
)

// ProjectOpsSetServiceHandlerFunc turns a function with the right signature into a project ops set service handler
type ProjectOpsSetServiceHandlerFunc func(ProjectOpsSetServiceParams, *models.IdentityVerifyResp) middleware.Responder

// Handle executing the request and returning a response
func (fn ProjectOpsSetServiceHandlerFunc) Handle(params ProjectOpsSetServiceParams, principal *models.IdentityVerifyResp) middleware.Responder {
	return fn(params, principal)
}

// ProjectOpsSetServiceHandler interface for that can handle valid project ops set service params
type ProjectOpsSetServiceHandler interface {
	Handle(ProjectOpsSetServiceParams, *models.IdentityVerifyResp) middleware.Responder
}

// NewProjectOpsSetService creates a new http.Handler for the project ops set service operation
func NewProjectOpsSetService(ctx *middleware.Context, handler ProjectOpsSetServiceHandler) *ProjectOpsSetService {
	return &ProjectOpsSetService{Context: ctx, Handler: handler}
}

/* ProjectOpsSetService swagger:route POST /project/service ProjectOps projectOpsSetService

ProjectOpsSetService project ops set service API

*/
type ProjectOpsSetService struct {
	Context *middleware.Context
	Handler ProjectOpsSetServiceHandler
}

func (o *ProjectOpsSetService) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewProjectOpsSetServiceParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal *models.IdentityVerifyResp
	if uprinc != nil {
		principal = uprinc.(*models.IdentityVerifyResp) // this is really a models.IdentityVerifyResp, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
