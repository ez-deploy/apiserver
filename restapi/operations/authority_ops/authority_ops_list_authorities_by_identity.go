// Code generated by go-swagger; DO NOT EDIT.

package authority_ops

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"

	"github.com/ez-deploy/apiserver/models"
)

// AuthorityOpsListAuthoritiesByIdentityHandlerFunc turns a function with the right signature into a authority ops list authorities by identity handler
type AuthorityOpsListAuthoritiesByIdentityHandlerFunc func(AuthorityOpsListAuthoritiesByIdentityParams, *models.IdentityVerifyResp) middleware.Responder

// Handle executing the request and returning a response
func (fn AuthorityOpsListAuthoritiesByIdentityHandlerFunc) Handle(params AuthorityOpsListAuthoritiesByIdentityParams, principal *models.IdentityVerifyResp) middleware.Responder {
	return fn(params, principal)
}

// AuthorityOpsListAuthoritiesByIdentityHandler interface for that can handle valid authority ops list authorities by identity params
type AuthorityOpsListAuthoritiesByIdentityHandler interface {
	Handle(AuthorityOpsListAuthoritiesByIdentityParams, *models.IdentityVerifyResp) middleware.Responder
}

// NewAuthorityOpsListAuthoritiesByIdentity creates a new http.Handler for the authority ops list authorities by identity operation
func NewAuthorityOpsListAuthoritiesByIdentity(ctx *middleware.Context, handler AuthorityOpsListAuthoritiesByIdentityHandler) *AuthorityOpsListAuthoritiesByIdentity {
	return &AuthorityOpsListAuthoritiesByIdentity{Context: ctx, Handler: handler}
}

/* AuthorityOpsListAuthoritiesByIdentity swagger:route GET /authority/identity AuthorityOps authorityOpsListAuthoritiesByIdentity

AuthorityOpsListAuthoritiesByIdentity authority ops list authorities by identity API

*/
type AuthorityOpsListAuthoritiesByIdentity struct {
	Context *middleware.Context
	Handler AuthorityOpsListAuthoritiesByIdentityHandler
}

func (o *AuthorityOpsListAuthoritiesByIdentity) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewAuthorityOpsListAuthoritiesByIdentityParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal *models.IdentityVerifyResp
	if uprinc != nil {
		principal = uprinc.(*models.IdentityVerifyResp) // this is really a models.IdentityVerifyResp, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
