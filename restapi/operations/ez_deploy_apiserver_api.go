// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"
	"strings"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/loads"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/runtime/security"
	"github.com/go-openapi/spec"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/ez-deploy/apiserver/restapi/operations/authority_ops"
	"github.com/ez-deploy/apiserver/restapi/operations/identity_ops"
	"github.com/ez-deploy/apiserver/restapi/operations/project_ops"
)

// NewEzDeployApiserverAPI creates a new EzDeployApiserver instance
func NewEzDeployApiserverAPI(spec *loads.Document) *EzDeployApiserverAPI {
	return &EzDeployApiserverAPI{
		handlers:            make(map[string]map[string]http.Handler),
		formats:             strfmt.Default,
		defaultConsumes:     "application/json",
		defaultProduces:     "application/json",
		customConsumers:     make(map[string]runtime.Consumer),
		customProducers:     make(map[string]runtime.Producer),
		PreServerShutdown:   func() {},
		ServerShutdown:      func() {},
		spec:                spec,
		useSwaggerUI:        false,
		ServeError:          errors.ServeError,
		BasicAuthenticator:  security.BasicAuth,
		APIKeyAuthenticator: security.APIKeyAuth,
		BearerAuthenticator: security.BearerAuth,

		JSONConsumer: runtime.JSONConsumer(),

		JSONProducer: runtime.JSONProducer(),

		AuthorityOpsAuthorityOpsDeleteAuthoritiesHandler: authority_ops.AuthorityOpsDeleteAuthoritiesHandlerFunc(func(params authority_ops.AuthorityOpsDeleteAuthoritiesParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation authority_ops.AuthorityOpsDeleteAuthorities has not yet been implemented")
		}),
		AuthorityOpsAuthorityOpsListAuthoritiesByIdentityHandler: authority_ops.AuthorityOpsListAuthoritiesByIdentityHandlerFunc(func(params authority_ops.AuthorityOpsListAuthoritiesByIdentityParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation authority_ops.AuthorityOpsListAuthoritiesByIdentity has not yet been implemented")
		}),
		AuthorityOpsAuthorityOpsListAuthoritiesByResourceHandler: authority_ops.AuthorityOpsListAuthoritiesByResourceHandlerFunc(func(params authority_ops.AuthorityOpsListAuthoritiesByResourceParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation authority_ops.AuthorityOpsListAuthoritiesByResource has not yet been implemented")
		}),
		AuthorityOpsAuthorityOpsSetAuthoritiesHandler: authority_ops.AuthorityOpsSetAuthoritiesHandlerFunc(func(params authority_ops.AuthorityOpsSetAuthoritiesParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation authority_ops.AuthorityOpsSetAuthorities has not yet been implemented")
		}),
		IdentityOpsIdentityOpsDeletePublicTokenHandler: identity_ops.IdentityOpsDeletePublicTokenHandlerFunc(func(params identity_ops.IdentityOpsDeletePublicTokenParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation identity_ops.IdentityOpsDeletePublicToken has not yet been implemented")
		}),
		IdentityOpsIdentityOpsGeneratePublicTokenHandler: identity_ops.IdentityOpsGeneratePublicTokenHandlerFunc(func(params identity_ops.IdentityOpsGeneratePublicTokenParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation identity_ops.IdentityOpsGeneratePublicToken has not yet been implemented")
		}),
		IdentityOpsIdentityOpsGetPrivateTokenHandler: identity_ops.IdentityOpsGetPrivateTokenHandlerFunc(func(params identity_ops.IdentityOpsGetPrivateTokenParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation identity_ops.IdentityOpsGetPrivateToken has not yet been implemented")
		}),
		IdentityOpsIdentityOpsListPublicTokenHandler: identity_ops.IdentityOpsListPublicTokenHandlerFunc(func(params identity_ops.IdentityOpsListPublicTokenParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation identity_ops.IdentityOpsListPublicToken has not yet been implemented")
		}),
		IdentityOpsIdentityOpsLoginHandler: identity_ops.IdentityOpsLoginHandlerFunc(func(params identity_ops.IdentityOpsLoginParams) middleware.Responder {
			return middleware.NotImplemented("operation identity_ops.IdentityOpsLogin has not yet been implemented")
		}),
		IdentityOpsIdentityOpsReGeneratePrivateTokenHandler: identity_ops.IdentityOpsReGeneratePrivateTokenHandlerFunc(func(params identity_ops.IdentityOpsReGeneratePrivateTokenParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation identity_ops.IdentityOpsReGeneratePrivateToken has not yet been implemented")
		}),
		IdentityOpsIdentityOpsRegisterHandler: identity_ops.IdentityOpsRegisterHandlerFunc(func(params identity_ops.IdentityOpsRegisterParams) middleware.Responder {
			return middleware.NotImplemented("operation identity_ops.IdentityOpsRegister has not yet been implemented")
		}),
		IdentityOpsIdentityOpsVerifyHandler: identity_ops.IdentityOpsVerifyHandlerFunc(func(params identity_ops.IdentityOpsVerifyParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation identity_ops.IdentityOpsVerify has not yet been implemented")
		}),
		ProjectOpsProjectOpsCreateProjectHandler: project_ops.ProjectOpsCreateProjectHandlerFunc(func(params project_ops.ProjectOpsCreateProjectParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation project_ops.ProjectOpsCreateProject has not yet been implemented")
		}),
		ProjectOpsProjectOpsDeleteProjectHandler: project_ops.ProjectOpsDeleteProjectHandlerFunc(func(params project_ops.ProjectOpsDeleteProjectParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation project_ops.ProjectOpsDeleteProject has not yet been implemented")
		}),
		ProjectOpsProjectOpsDeleteServiceHandler: project_ops.ProjectOpsDeleteServiceHandlerFunc(func(params project_ops.ProjectOpsDeleteServiceParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation project_ops.ProjectOpsDeleteService has not yet been implemented")
		}),
		ProjectOpsProjectOpsGetServiceHandler: project_ops.ProjectOpsGetServiceHandlerFunc(func(params project_ops.ProjectOpsGetServiceParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation project_ops.ProjectOpsGetService has not yet been implemented")
		}),
		ProjectOpsProjectOpsListPodsHandler: project_ops.ProjectOpsListPodsHandlerFunc(func(params project_ops.ProjectOpsListPodsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation project_ops.ProjectOpsListPods has not yet been implemented")
		}),
		ProjectOpsProjectOpsListServiceHandler: project_ops.ProjectOpsListServiceHandlerFunc(func(params project_ops.ProjectOpsListServiceParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation project_ops.ProjectOpsListService has not yet been implemented")
		}),
		ProjectOpsProjectOpsSetServiceHandler: project_ops.ProjectOpsSetServiceHandlerFunc(func(params project_ops.ProjectOpsSetServiceParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation project_ops.ProjectOpsSetService has not yet been implemented")
		}),

		// Applies when the "X-EZDEOPLY-APIKEY" header is set
		KeyAuth: func(token string) (interface{}, error) {
			return nil, errors.NotImplemented("api key auth (key) X-EZDEOPLY-APIKEY from header param [X-EZDEOPLY-APIKEY] has not yet been implemented")
		},
		// default authorizer is authorized meaning no requests are blocked
		APIAuthorizer: security.Authorized(),
	}
}

/*EzDeployApiserverAPI apiserver */
type EzDeployApiserverAPI struct {
	spec            *loads.Document
	context         *middleware.Context
	handlers        map[string]map[string]http.Handler
	formats         strfmt.Registry
	customConsumers map[string]runtime.Consumer
	customProducers map[string]runtime.Producer
	defaultConsumes string
	defaultProduces string
	Middleware      func(middleware.Builder) http.Handler
	useSwaggerUI    bool

	// BasicAuthenticator generates a runtime.Authenticator from the supplied basic auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BasicAuthenticator func(security.UserPassAuthentication) runtime.Authenticator

	// APIKeyAuthenticator generates a runtime.Authenticator from the supplied token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	APIKeyAuthenticator func(string, string, security.TokenAuthentication) runtime.Authenticator

	// BearerAuthenticator generates a runtime.Authenticator from the supplied bearer token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BearerAuthenticator func(string, security.ScopedTokenAuthentication) runtime.Authenticator

	// JSONConsumer registers a consumer for the following mime types:
	//   - application/json
	JSONConsumer runtime.Consumer

	// JSONProducer registers a producer for the following mime types:
	//   - application/json
	JSONProducer runtime.Producer

	// KeyAuth registers a function that takes a token and returns a principal
	// it performs authentication based on an api key X-EZDEOPLY-APIKEY provided in the header
	KeyAuth func(string) (interface{}, error)

	// APIAuthorizer provides access control (ACL/RBAC/ABAC) by providing access to the request and authenticated principal
	APIAuthorizer runtime.Authorizer

	// AuthorityOpsAuthorityOpsDeleteAuthoritiesHandler sets the operation handler for the authority ops delete authorities operation
	AuthorityOpsAuthorityOpsDeleteAuthoritiesHandler authority_ops.AuthorityOpsDeleteAuthoritiesHandler
	// AuthorityOpsAuthorityOpsListAuthoritiesByIdentityHandler sets the operation handler for the authority ops list authorities by identity operation
	AuthorityOpsAuthorityOpsListAuthoritiesByIdentityHandler authority_ops.AuthorityOpsListAuthoritiesByIdentityHandler
	// AuthorityOpsAuthorityOpsListAuthoritiesByResourceHandler sets the operation handler for the authority ops list authorities by resource operation
	AuthorityOpsAuthorityOpsListAuthoritiesByResourceHandler authority_ops.AuthorityOpsListAuthoritiesByResourceHandler
	// AuthorityOpsAuthorityOpsSetAuthoritiesHandler sets the operation handler for the authority ops set authorities operation
	AuthorityOpsAuthorityOpsSetAuthoritiesHandler authority_ops.AuthorityOpsSetAuthoritiesHandler
	// IdentityOpsIdentityOpsDeletePublicTokenHandler sets the operation handler for the identity ops delete public token operation
	IdentityOpsIdentityOpsDeletePublicTokenHandler identity_ops.IdentityOpsDeletePublicTokenHandler
	// IdentityOpsIdentityOpsGeneratePublicTokenHandler sets the operation handler for the identity ops generate public token operation
	IdentityOpsIdentityOpsGeneratePublicTokenHandler identity_ops.IdentityOpsGeneratePublicTokenHandler
	// IdentityOpsIdentityOpsGetPrivateTokenHandler sets the operation handler for the identity ops get private token operation
	IdentityOpsIdentityOpsGetPrivateTokenHandler identity_ops.IdentityOpsGetPrivateTokenHandler
	// IdentityOpsIdentityOpsListPublicTokenHandler sets the operation handler for the identity ops list public token operation
	IdentityOpsIdentityOpsListPublicTokenHandler identity_ops.IdentityOpsListPublicTokenHandler
	// IdentityOpsIdentityOpsLoginHandler sets the operation handler for the identity ops login operation
	IdentityOpsIdentityOpsLoginHandler identity_ops.IdentityOpsLoginHandler
	// IdentityOpsIdentityOpsReGeneratePrivateTokenHandler sets the operation handler for the identity ops re generate private token operation
	IdentityOpsIdentityOpsReGeneratePrivateTokenHandler identity_ops.IdentityOpsReGeneratePrivateTokenHandler
	// IdentityOpsIdentityOpsRegisterHandler sets the operation handler for the identity ops register operation
	IdentityOpsIdentityOpsRegisterHandler identity_ops.IdentityOpsRegisterHandler
	// IdentityOpsIdentityOpsVerifyHandler sets the operation handler for the identity ops verify operation
	IdentityOpsIdentityOpsVerifyHandler identity_ops.IdentityOpsVerifyHandler
	// ProjectOpsProjectOpsCreateProjectHandler sets the operation handler for the project ops create project operation
	ProjectOpsProjectOpsCreateProjectHandler project_ops.ProjectOpsCreateProjectHandler
	// ProjectOpsProjectOpsDeleteProjectHandler sets the operation handler for the project ops delete project operation
	ProjectOpsProjectOpsDeleteProjectHandler project_ops.ProjectOpsDeleteProjectHandler
	// ProjectOpsProjectOpsDeleteServiceHandler sets the operation handler for the project ops delete service operation
	ProjectOpsProjectOpsDeleteServiceHandler project_ops.ProjectOpsDeleteServiceHandler
	// ProjectOpsProjectOpsGetServiceHandler sets the operation handler for the project ops get service operation
	ProjectOpsProjectOpsGetServiceHandler project_ops.ProjectOpsGetServiceHandler
	// ProjectOpsProjectOpsListPodsHandler sets the operation handler for the project ops list pods operation
	ProjectOpsProjectOpsListPodsHandler project_ops.ProjectOpsListPodsHandler
	// ProjectOpsProjectOpsListServiceHandler sets the operation handler for the project ops list service operation
	ProjectOpsProjectOpsListServiceHandler project_ops.ProjectOpsListServiceHandler
	// ProjectOpsProjectOpsSetServiceHandler sets the operation handler for the project ops set service operation
	ProjectOpsProjectOpsSetServiceHandler project_ops.ProjectOpsSetServiceHandler

	// ServeError is called when an error is received, there is a default handler
	// but you can set your own with this
	ServeError func(http.ResponseWriter, *http.Request, error)

	// PreServerShutdown is called before the HTTP(S) server is shutdown
	// This allows for custom functions to get executed before the HTTP(S) server stops accepting traffic
	PreServerShutdown func()

	// ServerShutdown is called when the HTTP(S) server is shut down and done
	// handling all active connections and does not accept connections any more
	ServerShutdown func()

	// Custom command line argument groups with their descriptions
	CommandLineOptionsGroups []swag.CommandLineOptionsGroup

	// User defined logger function.
	Logger func(string, ...interface{})
}

// UseRedoc for documentation at /docs
func (o *EzDeployApiserverAPI) UseRedoc() {
	o.useSwaggerUI = false
}

// UseSwaggerUI for documentation at /docs
func (o *EzDeployApiserverAPI) UseSwaggerUI() {
	o.useSwaggerUI = true
}

// SetDefaultProduces sets the default produces media type
func (o *EzDeployApiserverAPI) SetDefaultProduces(mediaType string) {
	o.defaultProduces = mediaType
}

// SetDefaultConsumes returns the default consumes media type
func (o *EzDeployApiserverAPI) SetDefaultConsumes(mediaType string) {
	o.defaultConsumes = mediaType
}

// SetSpec sets a spec that will be served for the clients.
func (o *EzDeployApiserverAPI) SetSpec(spec *loads.Document) {
	o.spec = spec
}

// DefaultProduces returns the default produces media type
func (o *EzDeployApiserverAPI) DefaultProduces() string {
	return o.defaultProduces
}

// DefaultConsumes returns the default consumes media type
func (o *EzDeployApiserverAPI) DefaultConsumes() string {
	return o.defaultConsumes
}

// Formats returns the registered string formats
func (o *EzDeployApiserverAPI) Formats() strfmt.Registry {
	return o.formats
}

// RegisterFormat registers a custom format validator
func (o *EzDeployApiserverAPI) RegisterFormat(name string, format strfmt.Format, validator strfmt.Validator) {
	o.formats.Add(name, format, validator)
}

// Validate validates the registrations in the EzDeployApiserverAPI
func (o *EzDeployApiserverAPI) Validate() error {
	var unregistered []string

	if o.JSONConsumer == nil {
		unregistered = append(unregistered, "JSONConsumer")
	}

	if o.JSONProducer == nil {
		unregistered = append(unregistered, "JSONProducer")
	}

	if o.KeyAuth == nil {
		unregistered = append(unregistered, "XEZDEOPLYAPIKEYAuth")
	}

	if o.AuthorityOpsAuthorityOpsDeleteAuthoritiesHandler == nil {
		unregistered = append(unregistered, "authority_ops.AuthorityOpsDeleteAuthoritiesHandler")
	}
	if o.AuthorityOpsAuthorityOpsListAuthoritiesByIdentityHandler == nil {
		unregistered = append(unregistered, "authority_ops.AuthorityOpsListAuthoritiesByIdentityHandler")
	}
	if o.AuthorityOpsAuthorityOpsListAuthoritiesByResourceHandler == nil {
		unregistered = append(unregistered, "authority_ops.AuthorityOpsListAuthoritiesByResourceHandler")
	}
	if o.AuthorityOpsAuthorityOpsSetAuthoritiesHandler == nil {
		unregistered = append(unregistered, "authority_ops.AuthorityOpsSetAuthoritiesHandler")
	}
	if o.IdentityOpsIdentityOpsDeletePublicTokenHandler == nil {
		unregistered = append(unregistered, "identity_ops.IdentityOpsDeletePublicTokenHandler")
	}
	if o.IdentityOpsIdentityOpsGeneratePublicTokenHandler == nil {
		unregistered = append(unregistered, "identity_ops.IdentityOpsGeneratePublicTokenHandler")
	}
	if o.IdentityOpsIdentityOpsGetPrivateTokenHandler == nil {
		unregistered = append(unregistered, "identity_ops.IdentityOpsGetPrivateTokenHandler")
	}
	if o.IdentityOpsIdentityOpsListPublicTokenHandler == nil {
		unregistered = append(unregistered, "identity_ops.IdentityOpsListPublicTokenHandler")
	}
	if o.IdentityOpsIdentityOpsLoginHandler == nil {
		unregistered = append(unregistered, "identity_ops.IdentityOpsLoginHandler")
	}
	if o.IdentityOpsIdentityOpsReGeneratePrivateTokenHandler == nil {
		unregistered = append(unregistered, "identity_ops.IdentityOpsReGeneratePrivateTokenHandler")
	}
	if o.IdentityOpsIdentityOpsRegisterHandler == nil {
		unregistered = append(unregistered, "identity_ops.IdentityOpsRegisterHandler")
	}
	if o.IdentityOpsIdentityOpsVerifyHandler == nil {
		unregistered = append(unregistered, "identity_ops.IdentityOpsVerifyHandler")
	}
	if o.ProjectOpsProjectOpsCreateProjectHandler == nil {
		unregistered = append(unregistered, "project_ops.ProjectOpsCreateProjectHandler")
	}
	if o.ProjectOpsProjectOpsDeleteProjectHandler == nil {
		unregistered = append(unregistered, "project_ops.ProjectOpsDeleteProjectHandler")
	}
	if o.ProjectOpsProjectOpsDeleteServiceHandler == nil {
		unregistered = append(unregistered, "project_ops.ProjectOpsDeleteServiceHandler")
	}
	if o.ProjectOpsProjectOpsGetServiceHandler == nil {
		unregistered = append(unregistered, "project_ops.ProjectOpsGetServiceHandler")
	}
	if o.ProjectOpsProjectOpsListPodsHandler == nil {
		unregistered = append(unregistered, "project_ops.ProjectOpsListPodsHandler")
	}
	if o.ProjectOpsProjectOpsListServiceHandler == nil {
		unregistered = append(unregistered, "project_ops.ProjectOpsListServiceHandler")
	}
	if o.ProjectOpsProjectOpsSetServiceHandler == nil {
		unregistered = append(unregistered, "project_ops.ProjectOpsSetServiceHandler")
	}

	if len(unregistered) > 0 {
		return fmt.Errorf("missing registration: %s", strings.Join(unregistered, ", "))
	}

	return nil
}

// ServeErrorFor gets a error handler for a given operation id
func (o *EzDeployApiserverAPI) ServeErrorFor(operationID string) func(http.ResponseWriter, *http.Request, error) {
	return o.ServeError
}

// AuthenticatorsFor gets the authenticators for the specified security schemes
func (o *EzDeployApiserverAPI) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]runtime.Authenticator {
	result := make(map[string]runtime.Authenticator)
	for name := range schemes {
		switch name {
		case "key":
			scheme := schemes[name]
			result[name] = o.APIKeyAuthenticator(scheme.Name, scheme.In, o.KeyAuth)

		}
	}
	return result
}

// Authorizer returns the registered authorizer
func (o *EzDeployApiserverAPI) Authorizer() runtime.Authorizer {
	return o.APIAuthorizer
}

// ConsumersFor gets the consumers for the specified media types.
// MIME type parameters are ignored here.
func (o *EzDeployApiserverAPI) ConsumersFor(mediaTypes []string) map[string]runtime.Consumer {
	result := make(map[string]runtime.Consumer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "application/json":
			result["application/json"] = o.JSONConsumer
		}

		if c, ok := o.customConsumers[mt]; ok {
			result[mt] = c
		}
	}
	return result
}

// ProducersFor gets the producers for the specified media types.
// MIME type parameters are ignored here.
func (o *EzDeployApiserverAPI) ProducersFor(mediaTypes []string) map[string]runtime.Producer {
	result := make(map[string]runtime.Producer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "application/json":
			result["application/json"] = o.JSONProducer
		}

		if p, ok := o.customProducers[mt]; ok {
			result[mt] = p
		}
	}
	return result
}

// HandlerFor gets a http.Handler for the provided operation method and path
func (o *EzDeployApiserverAPI) HandlerFor(method, path string) (http.Handler, bool) {
	if o.handlers == nil {
		return nil, false
	}
	um := strings.ToUpper(method)
	if _, ok := o.handlers[um]; !ok {
		return nil, false
	}
	if path == "/" {
		path = ""
	}
	h, ok := o.handlers[um][path]
	return h, ok
}

// Context returns the middleware context for the ez deploy apiserver API
func (o *EzDeployApiserverAPI) Context() *middleware.Context {
	if o.context == nil {
		o.context = middleware.NewRoutableContext(o.spec, o, nil)
	}

	return o.context
}

func (o *EzDeployApiserverAPI) initHandlerCache() {
	o.Context() // don't care about the result, just that the initialization happened
	if o.handlers == nil {
		o.handlers = make(map[string]map[string]http.Handler)
	}

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/authority"] = authority_ops.NewAuthorityOpsDeleteAuthorities(o.context, o.AuthorityOpsAuthorityOpsDeleteAuthoritiesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/authority/identity"] = authority_ops.NewAuthorityOpsListAuthoritiesByIdentity(o.context, o.AuthorityOpsAuthorityOpsListAuthoritiesByIdentityHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/authority/resource"] = authority_ops.NewAuthorityOpsListAuthoritiesByResource(o.context, o.AuthorityOpsAuthorityOpsListAuthoritiesByResourceHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/authority"] = authority_ops.NewAuthorityOpsSetAuthorities(o.context, o.AuthorityOpsAuthorityOpsSetAuthoritiesHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/user/token/public"] = identity_ops.NewIdentityOpsDeletePublicToken(o.context, o.IdentityOpsIdentityOpsDeletePublicTokenHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/user/token/public"] = identity_ops.NewIdentityOpsGeneratePublicToken(o.context, o.IdentityOpsIdentityOpsGeneratePublicTokenHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/user/token/private"] = identity_ops.NewIdentityOpsGetPrivateToken(o.context, o.IdentityOpsIdentityOpsGetPrivateTokenHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/user/token/public"] = identity_ops.NewIdentityOpsListPublicToken(o.context, o.IdentityOpsIdentityOpsListPublicTokenHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/user/login"] = identity_ops.NewIdentityOpsLogin(o.context, o.IdentityOpsIdentityOpsLoginHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/user/token/private"] = identity_ops.NewIdentityOpsReGeneratePrivateToken(o.context, o.IdentityOpsIdentityOpsReGeneratePrivateTokenHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/user/register"] = identity_ops.NewIdentityOpsRegister(o.context, o.IdentityOpsIdentityOpsRegisterHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/user/verify"] = identity_ops.NewIdentityOpsVerify(o.context, o.IdentityOpsIdentityOpsVerifyHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/project"] = project_ops.NewProjectOpsCreateProject(o.context, o.ProjectOpsProjectOpsCreateProjectHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/project"] = project_ops.NewProjectOpsDeleteProject(o.context, o.ProjectOpsProjectOpsDeleteProjectHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/project/service"] = project_ops.NewProjectOpsDeleteService(o.context, o.ProjectOpsProjectOpsDeleteServiceHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/project/service/get"] = project_ops.NewProjectOpsGetService(o.context, o.ProjectOpsProjectOpsGetServiceHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/project/service/pod"] = project_ops.NewProjectOpsListPods(o.context, o.ProjectOpsProjectOpsListPodsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/project/service/list"] = project_ops.NewProjectOpsListService(o.context, o.ProjectOpsProjectOpsListServiceHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/project/service"] = project_ops.NewProjectOpsSetService(o.context, o.ProjectOpsProjectOpsSetServiceHandler)
}

// Serve creates a http handler to serve the API over HTTP
// can be used directly in http.ListenAndServe(":8000", api.Serve(nil))
func (o *EzDeployApiserverAPI) Serve(builder middleware.Builder) http.Handler {
	o.Init()

	if o.Middleware != nil {
		return o.Middleware(builder)
	}
	if o.useSwaggerUI {
		return o.context.APIHandlerSwaggerUI(builder)
	}
	return o.context.APIHandler(builder)
}

// Init allows you to just initialize the handler cache, you can then recompose the middleware as you see fit
func (o *EzDeployApiserverAPI) Init() {
	if len(o.handlers) == 0 {
		o.initHandlerCache()
	}
}

// RegisterConsumer allows you to add (or override) a consumer for a media type.
func (o *EzDeployApiserverAPI) RegisterConsumer(mediaType string, consumer runtime.Consumer) {
	o.customConsumers[mediaType] = consumer
}

// RegisterProducer allows you to add (or override) a producer for a media type.
func (o *EzDeployApiserverAPI) RegisterProducer(mediaType string, producer runtime.Producer) {
	o.customProducers[mediaType] = producer
}

// AddMiddlewareFor adds a http middleware to existing handler
func (o *EzDeployApiserverAPI) AddMiddlewareFor(method, path string, builder middleware.Builder) {
	um := strings.ToUpper(method)
	if path == "/" {
		path = ""
	}
	o.Init()
	if h, ok := o.handlers[um][path]; ok {
		o.handlers[method][path] = builder(h)
	}
}
