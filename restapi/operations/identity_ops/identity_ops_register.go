// Code generated by go-swagger; DO NOT EDIT.

package identity_ops

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// IdentityOpsRegisterHandlerFunc turns a function with the right signature into a identity ops register handler
type IdentityOpsRegisterHandlerFunc func(IdentityOpsRegisterParams) middleware.Responder

// Handle executing the request and returning a response
func (fn IdentityOpsRegisterHandlerFunc) Handle(params IdentityOpsRegisterParams) middleware.Responder {
	return fn(params)
}

// IdentityOpsRegisterHandler interface for that can handle valid identity ops register params
type IdentityOpsRegisterHandler interface {
	Handle(IdentityOpsRegisterParams) middleware.Responder
}

// NewIdentityOpsRegister creates a new http.Handler for the identity ops register operation
func NewIdentityOpsRegister(ctx *middleware.Context, handler IdentityOpsRegisterHandler) *IdentityOpsRegister {
	return &IdentityOpsRegister{Context: ctx, Handler: handler}
}

/* IdentityOpsRegister swagger:route POST /user/register IdentityOps identityOpsRegister

Register by email and password.

*/
type IdentityOpsRegister struct {
	Context *middleware.Context
	Handler IdentityOpsRegisterHandler
}

func (o *IdentityOpsRegister) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewIdentityOpsRegisterParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
