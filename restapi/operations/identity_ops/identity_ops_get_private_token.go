// Code generated by go-swagger; DO NOT EDIT.

package identity_ops

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"

	"github.com/ez-deploy/apiserver/models"
)

// IdentityOpsGetPrivateTokenHandlerFunc turns a function with the right signature into a identity ops get private token handler
type IdentityOpsGetPrivateTokenHandlerFunc func(IdentityOpsGetPrivateTokenParams, *models.IdentityVerifyResp) middleware.Responder

// Handle executing the request and returning a response
func (fn IdentityOpsGetPrivateTokenHandlerFunc) Handle(params IdentityOpsGetPrivateTokenParams, principal *models.IdentityVerifyResp) middleware.Responder {
	return fn(params, principal)
}

// IdentityOpsGetPrivateTokenHandler interface for that can handle valid identity ops get private token params
type IdentityOpsGetPrivateTokenHandler interface {
	Handle(IdentityOpsGetPrivateTokenParams, *models.IdentityVerifyResp) middleware.Responder
}

// NewIdentityOpsGetPrivateToken creates a new http.Handler for the identity ops get private token operation
func NewIdentityOpsGetPrivateToken(ctx *middleware.Context, handler IdentityOpsGetPrivateTokenHandler) *IdentityOpsGetPrivateToken {
	return &IdentityOpsGetPrivateToken{Context: ctx, Handler: handler}
}

/* IdentityOpsGetPrivateToken swagger:route GET /user/token/private IdentityOps identityOpsGetPrivateToken

get private_token.

*/
type IdentityOpsGetPrivateToken struct {
	Context *middleware.Context
	Handler IdentityOpsGetPrivateTokenHandler
}

func (o *IdentityOpsGetPrivateToken) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewIdentityOpsGetPrivateTokenParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal *models.IdentityVerifyResp
	if uprinc != nil {
		principal = uprinc.(*models.IdentityVerifyResp) // this is really a models.IdentityVerifyResp, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
